#' ODE solution
#'
#' This function solves an ODE system based on the given parameter list.
#' @param user created parameters
#' @return solution of an ODE function system
#' @export
model <- function(t, y, param) {
S <- y[1]
E <- y[2]
I <- y[3]
R <- y[4]
N <- param["N"]
beta <- param["beta"]
mu <- param["mu"]
gamma <- param["gamma"]
lamda <- param["lamda"]
dSt <- mu * (N - S) - beta * S * I/N
dEt <- beta * S * I/N - mu * E-lamda*E
dIt <-   - (mu + gamma) * I+lamda*E
dRt <- gamma * I - mu * R
outcome <- c(dSt, dEt,dIt, dRt)
list(outcome)
}
#设置仿真参数
times <- seq(0, 156, by = 1/7)
param <- c(mu = 0.000, lamda = 0.03, beta = 4, gamma = 0.1,N = 1)
init <- c(S = 0.9999, E = 0.00008,I = 0.00002, R = 0)
result <-  deSolve::ode(y=init, times=times, func=model, parms = param)
model <- function(t, y, param) {
S <- y[1]
E <- y[2]
I <- y[3]
R <- y[4]
N <- param["N"]
beta <- param["beta"]
mu <- param["mu"]
gamma <- param["gamma"]
lamda <- param["lamda"]
dSt <- mu * (N - S) - beta * S * I/N
dEt <- beta * S * I/N - mu * E-lamda*E
dIt <-   - (mu + gamma) * I+lamda*E
dRt <- gamma * I - mu * R
outcome <- c(dSt, dEt,dIt, dRt)
list(outcome)
}
times <- seq(0, 156, by = 1/7)
param <- c(mu = 0.000, lamda = 0.03, beta = 4, gamma = 0.1,N = 1)
init <- c(S = 0.9999, E = 0.00008,I = 0.00002, R = 0)
result <-  deSolve::ode(y=init, times=times, func=model, parms = param)
